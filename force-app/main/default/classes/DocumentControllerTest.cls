@isTest
public class DocumentControllerTest {

    @isTest
    static void testeSalvarImagem() {
        // Setup test data
        String contatoId = createTestContact().Id; // Create a test contact
        String opportunityId = createTestOpportunity().Id; // Create a test opportunity
        Boolean obrigatorio = true;
        String fileName = 'RG';
        String base64Data = ''; // Mock base64 data
        String tipoDocumento = 'application/pdf';

        // Create test Documentacao__c and Checklist_de_Documentos__c records
        createTestDocumentacao(fileName, obrigatorio, contatoId);
        createTestChecklist(opportunityId, contatoId);

      
        Test.startTest();
        DocumentController.salvarImagem(contatoId, opportunityId, obrigatorio, fileName, base64Data, tipoDocumento);
        Test.stopTest();

        ContentVersion[] versions = [SELECT Title FROM ContentVersion WHERE Title = :fileName];
        System.assertEquals(1, versions.size(), 'ContentVersion should be inserted.');

        ContentDocumentLink[] links = [SELECT LinkedEntityId FROM ContentDocumentLink WHERE LinkedEntityId = :contatoId];
        System.assertEquals(1, links.size(), 'ContentDocumentLink should be inserted.');

        Documentacao__c[] documentos = [SELECT Contato__c FROM Documentacao__c WHERE Contato__c = :contatoId];
        System.assertEquals(1, documentos.size(), 'Documentacao__c should be inserted.');

        // Verify Checklist_de_Documentos__c insertion
        Checklist_de_Documentos__c[] checklists = [SELECT Oportunidade__c FROM Checklist_de_Documentos__c WHERE Oportunidade__c = :opportunityId];
        System.assertEquals(1, checklists.size(), 'Checklist_de_Documentos__c should be inserted.');
    }

    // Method to create a test Contact
    private static Contact createTestContact() {
        Contact testContact = new Contact(LastName='Test Contact', Email='test@example.com');
        insert testContact;
        return testContact;
    }

    // Method to create a test Opportunity
    private static Opportunity createTestOpportunity() {
        Opportunity testOpportunity = new Opportunity(Name='Test Opportunity', StageName='Prospecting', CloseDate=Date.today().addDays(30));
        insert testOpportunity;
        return testOpportunity;
    }

    // Method to create a test Documentacao__c record
    private static void createTestDocumentacao(String fileName, Boolean obrigatorio, String contatoId) {
        Documentacao__c doc = new Documentacao__c(
            Contato__c = contatoId,
            Obrigatorio__c = obrigatorio,
            Entregue__c = true,
            Name = fileName,
            ContentDocumentId_c__c = '069be000000BHwnAAG'
        );
        insert doc;
    }

private static void createTestChecklist(String opportunityId, String contatoId) {
    // Create a new Documentacao__c record
    Documentacao__c documentacao = new Documentacao__c(
        Obrigatorio__c = true,
        Entregue__c = true,
        Name = 'MockDocumentacaoId',
        ContentDocumentId_c__c = '069be000000DFhBAAW'
    );
    insert documentacao;

    Checklist_de_Documentos__c checklist = new Checklist_de_Documentos__c(
        Oportunidade__c = opportunityId,
        Contato__c = contatoId,
        Documenta_o__c = documentacao.Id
    );
    insert checklist;
}
    @isTest
    static void testBaixarDocumento() {
        // Criar um novo ContentDocument e ContentVersion
        ContentVersion cv = new ContentVersion();
        cv.Title = 'Test Document';
        cv.PathOnClient = 'testdocument.pdf';
        cv.VersionData = Blob.valueOf('Test content');
        insert cv;

        // Associar o ContentVersion ao ContentDocument
        ContentDocument cd = [SELECT Id FROM ContentDocument WHERE Id = :cv.ContentDocumentId LIMIT 1];

        // Criar um Checklist_de_Documentos__c para associar ao ContentDocument
        Checklist_de_Documentos__c checklistDoc = new Checklist_de_Documentos__c();
        checklistDoc.Contato__c = 'someContactId'; // Substitua pelo ID real
        // checklistDoc.Entregue__c = true; // Comente ou ajuste conforme a existência do campo
        insert checklistDoc;

        // Chamar o método a ser testado
        Test.startTest();
        String resultado = DocumentController.baixarDocumento('someContactId', 'Test Document');
        Test.stopTest();

        // Verificar o resultado
        System.debug('Resultado: ' + resultado);
        Map<String, String> resultMap = (Map<String, String>) JSON.deserializeUntyped(resultado);
        System.assertNotEquals(null, resultMap.get('base64Data'), 'Base64 data should not be null');
        System.assertNotEquals(null, resultMap.get('mimeType'), 'MIME type should not be null');
        System.assertNotEquals(null, resultMap.get('fileName'), 'File name should not be null');
    }


}